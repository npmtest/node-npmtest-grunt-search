{"/home/travis/build/npmtest/node-npmtest-grunt-search/test.js":"/* istanbul instrument in package npmtest_grunt_search */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-search/lib.npmtest_grunt_search.js":"/* istanbul instrument in package npmtest_grunt_search */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_search = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_search = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-search/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-search && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_search */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_search\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_search.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_search.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_search.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_search.__dirname + '/lib.npmtest_grunt_search.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-search/node_modules/grunt-search/Gruntfile.js":"/*\n * grunt-search\n * https://github.com/benkeen/grunt-search\n *\n * Copyright (c) 2015 Ben Keen\n * Licensed under the MIT license.\n */\n\n\"use strict\";\n\nmodule.exports = function(grunt) {\n\n\tgrunt.initConfig({\n\n\t\t// before generating any new files, remove any previously-created files\n\t\tclean: {\n\t\t\ttests: ['test/tmp']\n\t\t},\n\n\t\tjshint: {\n\t\t\tall: ['Gruntfile.js', 'tasks/search.js'],\n\t\t\toptions: {\n\t\t\t\tforce: true,\n\t\t\t\tcurly: false,\n\t\t\t\teqeqeq: false,\n\t\t\t\timmed: false,\n\t\t\t\tlatedef: true,\n\t\t\t\tnewcap: false,\n\t\t\t\tnoarg: true,\n\t\t\t\tsub: true,\n\t\t\t\tundef: true,\n\t\t\t\tboss: true,\n\t\t\t\teqnull: true,\n\t\t\t\tnode: true,\n\t\t\t\tsmarttabs: true,\n\t\t\t\tmultistr: true,\n\t\t\t\tbrowser: true,\n\t\t\t\tonecase: true,\n\t\t\t\tasi: true,\n\t\t\t\tstrict: false,\n\t\t\t\ttrailing: false,\n\t\t\t\tnonstandard: true,\n\t\t\t\tnoempty: false,\n\t\t\t\tshadow: true,\n\t\t\t\tglobals: {\n\t\t\t\t\tmodule: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// configuration to be run (and then tested)\n\t\tsearch: {\n\t\t\tdefault: {\n\t\t\t\tfiles: {\n\t\t\t\t\tsrc: [\"test/test_source.html\"]\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tsearchString: \"style\",\n\t\t\t\t\tlogFile: \"test/tmp/results.json\",\n\t\t\t\t\tlogFormat: \"json\",\n\t\t\t\t\toutputExaminedFiles: true\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tjunit: {\n\t\t\t\tfiles: {\n\t\t\t\t\tsrc: [\"test/fixtures/file*\", \"!test/fixtures/file3*\"]\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tsearchString: \"@nocommit\",\n\t\t\t\t\tlogFile: \"test/tmp/junit-nocommit.xml\",\n\t\t\t\t\tlogFormat: \"junit\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcustomLogSearch: {\n\t\t\t\tfiles: {\n\t\t\t\t\tsrc: [\"test/test_source.html\"]\n\t\t\t\t},\n\t\t\t\toptions: {\n\t\t\t\t\tlogFormat: \"custom\",\n\t\t\t\t\tsearchString: [\".net\", \"mon\"],\n\t\t\t\t\tcustomLogFormatCallback: function(params) {\n\n            // here you'd do whatever you want with the data. The console.log() just outputs [Object] for the really\n            // interesting parts - but you can access it here\n\t\t\t\t\t\tconsole.log(params);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// unit tests\n\t\tnodeunit: {\n\t\t\ttests: ['test/*_test.js']\n\t\t}\n\t});\n\n\tgrunt.loadTasks('tasks');\n\n\tgrunt.loadNpmTasks('grunt-contrib-clean');\n\tgrunt.loadNpmTasks('grunt-contrib-nodeunit');\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n\n\t// whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this plugin's task(s), then test the result\n\tgrunt.registerTask('test', ['jshint', 'clean', 'search', 'nodeunit']);\n\n\t// by default, lint and run all tests\n\tgrunt.registerTask('default', ['search', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-search/node_modules/grunt-search/tasks/search.js":"/*\n * grunt-search\n * https://github.com/benkeen/grunt-search\n *\n * Copyright (c) 2013 Ben Keen\n * Licensed under the MIT license.\n */\n\n\"use strict\";\n\nmodule.exports = function(grunt) {\n\n\tgrunt.registerMultiTask(\"search\", \"Grunt plugin that searches a list of files for particular search strings and logs all findings in various formats.\", function() {\n\n\t\t// merge task-specific and/or target-specific options with these defaults\n\t\tvar options = this.options({\n\t\t\tsearchString: null,\n\t\t\tlogFile: null,\n\t\t\tlogFormat: 'json', // json/xml/text/junit/custom/console\n\t\t\tcustomLogFormatCallback: null,\n\t\t\tfailOnMatch: false,\n\t\t\tscopeMatchToFile: false,\n\t\t\tJUnitTestsuiteName: 'jshint',\n\t\t\tJUnitFailureMessage: 'Substring matched',\n\t\t\toutputExaminedFiles: false,\n\t\t\tonComplete: null,\n\t\t\tonMatch: null,\n\t\t\tlogCondition: null,\n\t\t\tisJUnitFailure: null\n\t\t});\n\n\t\t// validate the options\n\t\tif (!_validateOptions(options)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// if the searchString isn't a regular expression, convert it to one\n    if (!Array.isArray(options.searchString)) {\n      options.searchString = [options.searchString];\n    }\n\n    // now convert all strings in the array to regexps\n    var cleanSearchStrings = [];\n    options.searchString.forEach(function (item) {\n      if (!(item instanceof RegExp)) {\n        cleanSearchStrings.push({ regexp: new RegExp(item, \"g\"), original: item });\n      } else {\n        cleanSearchStrings.push({ regexp: item, original: item });\n      }\n    });\n\n\t\t// now iterate over all specified file groups\n\t\tthis.files.forEach(function(f) {\n\n\t\t\t// filter out invalid files and folders\n\t\t\tvar filePaths = [];\n\t\t\tf.src.filter(function(filepath) {\n\t\t\t\tif (grunt.file.isDir(filepath)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// *** this was in the gruntplugin example, but it doesn't seem to even GET here if the file specified\n\t\t\t\t// doesn't exist... ***\n\t\t\t\tif (!grunt.file.exists(filepath)) {\n\t\t\t\t\tgrunt.log.warn('Source file \"' + filepath + '\" not found.');\n\t\t\t\t} else {\n\t\t\t\t\tfilePaths.push(filepath);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// now search the files for the search string(s). This is pretty poor from a memory perspective: it loads\n\t\t\t// the entire file into memory and runs the reg exp on it\n\t\t\tvar matches = {};\n\t\t\tvar numMatches = 0;\n\t\t\tfor (var i=0; i<filePaths.length; i++) {\n\t\t\t\tvar file = filePaths[i];\n\t\t\t\tvar src = grunt.file.read(file);\n\n\t\t\t\tvar lines = src.split(\"\\n\");\n\t\t\t\tvar matchLines = [];\n\t\t\t\tvar matchStrings = [];\n\t\t\t\tvar foundMatch = false;\n\n        // yikes.\n\t\t\t\tfor (var j=1; j<=lines.length; j++) {\n          for (var k=0; k<cleanSearchStrings.length; k++) {\n            var currSearchString = cleanSearchStrings[k];\n            var lineMatches = lines[j-1].match(currSearchString.regexp);\n\n            if (!lineMatches) {\n              continue;\n            }\n\n            foundMatch = true;\n            matchLines.push(j);\n\n            for (var m=0; m<lineMatches.length; m++) {\n              matchStrings.push(lineMatches[m]);\n\n              var lineMatch = {\n                file: file,\n                line: j,\n                match: lineMatches[m],\n                searchString: currSearchString.original\n              };\n\n              if (!options.scopeMatchToFile && (options.logCondition === null || options.logCondition(lineMatch) === true)) {\n                if (!matches.hasOwnProperty(file)) {\n                  matches[file] = [];\n                }\n                matches[file].push({ line: j, match: lineMatches[m], searchString: currSearchString.original });\n                numMatches++;\n\n                if (options.onMatch !== null) {\n                  options.onMatch(lineMatch);\n                }\n              }\n            }\n          }\n\t\t\t\t}\n\n\t\t\t\tvar fileMatch = {\n\t\t\t\t\tfile: file,\n\t\t\t\t\tline: matchLines,\n\t\t\t\t\tmatch: matchStrings\n\t\t\t\t};\n\n\t\t\t\tif (foundMatch && options.scopeMatchToFile && (options.logCondition === null || options.logCondition(fileMatch) === true)) {\n\t\t\t\t\tif (!matches.hasOwnProperty(file)) {\n\t\t\t\t\t\tmatches[file] = [];\n\t\t\t\t\t}\n\t\t\t\t\tmatches[file].push({ line: matchLines, match: matchStrings });\n\t\t\t\t\tnumMatches++;\n\n\t\t\t\t\tif (options.onMatch !== null) {\n\t\t\t\t\t\toptions.onMatch(fileMatch);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// write the log file - even if there are no results. It'll just contain a \"numResults: 0\" which is useful\n\t\t\t// in of itself\n\t\t\t_generateLogFile(options, filePaths, matches, numMatches);\n\t\t\tif (numMatches > 0 && options.failOnMatch) {\n\t\t\t\tgrunt.fail.fatal(\"Matches of \" + options.searchString.toString() + \" found\");\n\t\t\t}\n\n\t\t\tif (options.onComplete !== null) {\n\t\t\t\toptions.onComplete({ numMatches: numMatches, matches: matches });\n\t\t\t}\n\n\t\t\tgrunt.log.writeln(\"Num matches: \" + numMatches);\n\t\t});\n\t});\n\n\tvar _validateOptions = function(options) {\n\t\tvar optionErrors = [];\n\t\tif (options.searchString === null) {\n\t\t\toptionErrors.push(\"Missing options.searchString value.\");\n\t\t}\n\t\tif (options.logFormat !== \"console\" && options.logFormat !== \"custom\" && options.logFile === null) {\n\t\t\toptionErrors.push(\"Missing options.logFile value.\");\n\t\t}\n\t\tif (optionErrors.length) {\n\t\t\tfor (var i=0; i<optionErrors.length; i++) {\n\t\t\t\tgrunt.log.error(\"Error: \", optionErrors[i]);\n\t\t\t}\n\t\t}\n\t\treturn optionErrors.length === 0;\n\t};\n\n\tvar _generateLogFile = function(options, filePaths, results, numResults) {\n\t\tvar content = '';\n\n\t\tif (options.logFormat === \"json\") {\n\t\t\tcontent = _getJSONLogFormat(options, filePaths, results, numResults);\n\t\t} else if (options.logFormat === \"xml\") {\n\t\t\tcontent = _getXMLLogFormat(options, filePaths, results, numResults);\n\t\t} else if (options.logFormat === \"junit\") {\n\t\t\tcontent = _getJUnitLogFormat(options, filePaths, results, numResults);\n\t\t} else if (options.logFormat === \"text\" || options.logFormat === \"console\") {\n\t\t\tcontent = _getTextLogFormat(options, filePaths, results, numResults);\n\t\t} else if (options.logFormat === \"custom\") {\n\t\t\tif (_isFunction(options.customLogFormatCallback)) {\n\t\t\t\toptions.customLogFormatCallback({\n\t\t\t\t\tfilePaths: filePaths,\n\t\t\t\t\tresults: results,\n\t\t\t\t\tnumResults: numResults\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tgrunt.log.error(\"Error: custom logFormat option selected, but invalid/missing customLogFormatCallback option defined.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (options.logFormat !== \"console\") {\n\t\t\tgrunt.file.write(options.logFile, content);\n\t\t} else {\n\t\t\tgrunt.log.writeln(content);\n\t\t}\n\t};\n\n\n\t/**\n\t * This generates a JSON formatted file of the match results. Boy I miss templating. :-)\n\t * @param options\n\t * @param results\n\t * @param numResults\n\t * @returns {string}\n\t * @private\n\t */\n\tvar _getJSONLogFormat = function(options, filePaths, results, numResults) {\n\t\tvar content = \"{\\n\\t\\\"numResults\\\": \" + numResults + \",\\n\" + \n\t\t\t\"\\t\\\"creationDate\\\": \\\"\" + _getISODateString() + \"\\\",\\n\" + \n\t\t\t\"\\t\\\"results\\\": {\\n\";\n\n\t\tvar group = [];\n\t\tfor (var file in results) {\n\t\t\tvar groupStr = \"\\t\\t\\\"\" + file + \"\\\": [\\n\";\n\n\t\t\tvar matchGroup = [];\n\t\t\tfor (var i=0; i<results[file].length; i++) {\n\t\t\t\tmatchGroup.push(\"\\t\\t\\t{\\n\" + \n\t\t\t\t\t\"\\t\\t\\t\\t\\\"line\\\": \" + results[file][i].line + \",\\n\" + \n\t\t\t\t\t\"\\t\\t\\t\\t\\\"match\\\": \" + \"\\\"\" + _cleanStr(results[file][i].match) + \"\\\"\" + \n\t\t\t\t\t\"\\n\\t\\t\\t}\");\n\t\t\t}\n\t\t\tgroupStr += matchGroup.join(\",\\n\") + \"\\n\";\n\t\t\tgroupStr += \"\\t\\t]\"\n\t\t\tgroup.push(groupStr);\n\t\t}\n\t\tcontent += group.join(\",\\n\");\n\t\tcontent += \"\\n\\t}\"\n\n\t\tif (options.outputExaminedFiles) {\n\t\t\tcontent += \",\\n\\t\\\"examinedFiles\\\": [\\n\";\n\t\t\tvar files = [];\n\t\t\tfor (var i=0; i<filePaths.length; i++) {\n\t\t\t\tfiles.push(\"\\t\\t\\\"\" + _cleanStr(filePaths[i]) + \"\\\"\");\n\t\t\t}\n\t\t\tcontent += files.join(\",\\n\");\n\t\t\tcontent += \"\\n\\t]\";\n\t\t}\n\n\t\tcontent += \"\\n}\";\n\n\t\treturn content;\n\t};\n\n\tvar _getXMLLogFormat = function(options, filePaths, results, numResults) {\n\t\tvar content = \"<?xml version=\\\"1.0\\\"?>\\n\" + \n\t\t\t\"<search>\\n\" + \n\t\t\t\"\\t<numResults>\" + numResults + \"</numResults>\\n\" + \n\t\t\t\"\\t<creationDate>\" + _getISODateString() + \"</creationDate>\\n\" + \n\t\t\t\"\\t<results>\";\n\n\t\tvar matchGroup = \"\";\n\t\tfor (var file in results) {\n\t\t\tfor (var i=0; i<results[file].length; i++) {\n\t\t\t\tmatchGroup += \"\\n\\t\\t<result>\\n\" + \n\t\t\t\t\t\"\\t\\t\\t<file>\" + file + \"</file>\\n\" + \n\t\t\t\t\t\"\\t\\t\\t<line>\" + results[file][i].line + \"</line>\\n\" + \n\t\t\t\t\t\"\\t\\t\\t<match>\" + results[file][i].match + \"</match>\\n\" +\n          \"\\t\\t\\t<searchStr>\" + results[file][i].searchString + \"</searchStr>\\n\" +\n\t\t\t\t\t\"\\t\\t</result>\";\n\t\t\t}\n\t\t}\n\t\tcontent += matchGroup + \"\\n\" + \"\\t</results>\\n\";\n\n\n\t\tif (options.outputExaminedFiles) {\n\t\t\tcontent += \"\\t<examinedFiles>\\n\";\n\t\t\tfor (var i=0; i<filePaths.length; i++) {\n\t\t\t\tcontent += \"\\t\\t<file>\" + filePaths[i] + \"</file>\\n\";\n\t\t\t}\n\t\t\tcontent += \"\\t</examinedFiles>\\n\";\n\t\t}\n\n\t\tcontent +=  \"</search>\";\n\n\t\treturn content;\n\t};\n\n\tvar _getTextLogFormat = function(options, filePaths, results, numResults) {\n\t\tvar content = \"Num results: \" + numResults + \"\\n\" + \n\t\t\t\"Creation date: \" + _getISODateString() + \"\\n\" + \n\t\t\t\"Results:\\n\";\n\n\t\tfor (var file in results) {\n\t\t\tfor (var i=0; i<results[file].length; i++) {\n\t\t\t\tcontent += \"\\tFile: \" + file + \"\\n\" + \n\t\t\t\t\"\\tLine: \" + results[file][i].line + \"\\n\" + \n\t\t\t\t\"\\tMatch: \" + results[file][i].match + \"\\n\" +\n        \"\\tSearch: \" + results[file][i].searchString + \"\\n\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (options.outputExaminedFiles) {\n\t\t\tcontent += \"Examined files:\\n\";\n\t\t\tfor (var i=0; i<filePaths.length; i++) {\n\t\t\t\tcontent += \"\\t\" + filePaths[i] + \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\treturn content;\n\t};\n\n\tvar _getJUnitLogFormat = (function() {\n\n\t\tfunction failTestCaseXML(name, matches, message) {\n\t\t\treturn [\n\t\t\t\t\"\\t<testcase name=\\\"\" + name + \"\\\">\",\n\t\t\t\t\"\\t\\t<failure message=\\\"\" + message + \"\\\">\",\n\t\t\t\t\"\\t\\t<![CDATA[\",\n\n\t\t\t\t\tmatches.map(function(failure, num, message) {\n\t\t\t\t\t\treturn (num + 1) + \". line \" + failure.line + \": \" + failure.match;\n\t\t\t\t\t}).join(\"\\n\"),\n\n\t\t\t\t\"\\t\\t]]>\",\n\t\t\t\t\"\\t\\t</failure>\",\n\t\t\t    \"\\t</testcase>\"\n\n\t\t\t].join(\"\\n\");\n\t\t}\n\n\t\tfunction successTestCaseXML(name, matches) {\n\t\t\treturn [\n\t\t\t\t\"\\t<testcase name=\\\"\" + name + \"\\\">\",\n\t\t\t\t\"\\t</testcase>\"\n\t\t\t].join(\"\\n\");\n\t\t}\n\n\t\treturn function(options, filePaths, results, numResults) {\n\n\t\t\tvar parts = Object.keys(results).reduce(function(parts, file) {\n\t\t\t\tparts.numTests += 1;\n\t\t\t\t\n\t\t\t\tvar isFailure = true;\n\n\t\t\t\tif (options.isJUnitFailure !== null) {\n\t\t\t\t\tisFailure = options.isJUnitFailure(file, results[file]);\n\t\t\t\t}\n\n\t\t\t\tif (isFailure) {\n\t\t\t\t\tparts.numFailures += results[file].length;\n\t\t\t\t\tparts.testCases.push(failTestCaseXML(file, results[file], options.JUnitFailureMessage));\n\t\t\t\t} else {\n\t\t\t\t\tparts.testCases.push(successTestCaseXML(file, results[file], options.JUnitFailureMessage));\n\t\t\t\t}\n\n\t\t\t\treturn parts;\n\t\t\t}, {\n\t\t\t\tnumTests    : 0,\n\t\t\t\tnumFailures : 0,\n\t\t\t\ttestCases   : []\n\t\t\t});\n\n\t\t\tvar content = [\n\t\t\t\t\"<?xml version=\\\"1.0\\\"?>\",\n\t\t\t\t\"<testsuite name=\\\"\" + options.JUnitTestsuiteName + \"\\\" tests=\\\"\" + parts.numTests + \"\\\" failures=\\\"\" + parts.numFailures + \"\\\" errors=\\\"0\\\">\",\n\t\t\t\t\tparts.testCases.join(\"\\n\"),\n\t\t\t\t\"</testsuite>\"\n\n\t\t\t].join(\"\\n\");\n\n\t\t\tgrunt.verbose.writeln(options.searchString.toString().yellow + ' > ' + options.logFile);\n\t\t\tgrunt.verbose.writeln(content);\n\n\t\t\treturn content;\n\t\t};\n\t}());\n\n\n\t// helpers ----------------\n\n\tvar _cleanStr = function(str) {\n\t\treturn str.replace(/\"/g, \"\\\\\\\"\");\n\t}\n\n\tvar _getISODateString = function() {\n\t\tvar d = new Date();\n\t\tfunction pad(n) {\n\t\t\treturn n < 10 ? '0' + n : n;\n\t\t}\n\t\treturn d.getUTCFullYear() + '-'+ \n\t\t\tpad(d.getUTCMonth()+1) + '-' + \n\t\t\tpad(d.getUTCDate()) + ' ' + \n\t\t\tpad(d.getUTCHours()) + ':' + \n\t\t\tpad(d.getUTCMinutes()) + ':' + \n\t\t\tpad(d.getUTCSeconds())\n\t};\n\n\tvar _isFunction = function(obj) {\n\t\treturn !!(obj && obj.constructor && obj.call && obj.apply);\n\t};\n};\n"}